@model IEnumerable<Webx.Web.Data.Entities.User>

@{
    ViewData["Title"] = "View All Customers";
    ViewData["Breadcrumb"] = null;
    Layout = "~/Views/Shared/_LayoutAdminPanel.cshtml";
    List<Object> toolbarItems = new List<Object>();
    if(ViewBag.IsActive == true)
    {
        toolbarItems.Add(new { text = "Show Inactive", tooltipText = "Show inactive Customers", prefixIcon = "e-expand", id = "showCustomer",align ="Right"});
    }
    else
    {
        toolbarItems.Add(new { text = "Hide Inactive", tooltipText = "Hide inactive Customers", prefixIcon = "e-expand", id = "hideCustomer",align ="Right"});
    }
    toolbarItems.Add("Search");
    toolbarItems.Add(new { text = "Edit", tooltipText = "Edit employee", prefixIcon = "e-expand", id = "editCustomer" });
    toolbarItems.Add(new { text = "Info", tooltipText = "Employee Details", prefixIcon = "e-expand", id = "infoCustomer" });
    toolbarItems.Add(new { text = "Delete", tooltipText = "Delete Employee", prefixIcon = "e-expand", id = "deleteCustomer" });


    var yesButton = new ButtonModel() { content = "Yes", cssClass = "e-flat" };
    var noButton = new ButtonModel() { content = "No", cssClass = "e-flat" };
}

<style>
    .image img {
        height: 75px;
        width: 75px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
    }

    #editCustomer > .e-expand::before {
        content: '\e730' !important;
    }

    #infoCustomer > .e-expand::before{
        content: '\e800' !important;
    }
   
    #deleteCustomer > .e-expand::before{
        content: '\e820' !important;
    }

    #showCustomer > .e-expand::before{
        content: '\e887' !important;
    }

    #hideCustomer > .e-expand::before{
        content: '\e7de' !important;
    }

</style>

<!--Div que permite dar espaçamento entre ejs grid e topo-->
<div class="container-fluid" style="min-height:25px;background-color: #f4f6f9;">
   
</div>

<div id='container' class="container-fluid">

    <!-- Tabela/Grid do syncfusion  -->
    <ejs-grid id="grid" TValue="@ViewBag.Type" dataSource="Model" rowSelected="rowSelected" allowSelection="true" allowPaging="true" allowSorting="true" allowFiltering="false" toolbarClick="toolbarClick" toolbar="toolbarItems" >
        <e-grid-selectionsettings type="Single" mode="Row"></e-grid-selectionsettings>
        <e-grid-pagesettings pageSize="7"></e-grid-pagesettings>        
        <e-grid-columns>            
            <e-grid-column headerText="Profile Picture" template="#template" width="160" textAlign="Center" allowEditing="false"></e-grid-column>
            <e-grid-column field="Id" isPrimaryKey="true" width="0px"></e-grid-column>
            <e-grid-column field="Active" template="#templateCheckbox" textAlign="Center" width="80px"></e-grid-column>
            <e-grid-column field="FullName" textAlign="Left" allowEditing="false" width="200px"></e-grid-column>
            <e-grid-column field="Email" textAlign="Left" width="250px"></e-grid-column>
            <e-grid-column field="PhoneNumber" textAlign="Left" width="150px"></e-grid-column>
            <e-grid-column field="NIF" headerText="Tax Id. Number (NIF)" textAlign="Left" width="150px"></e-grid-column>
            <e-grid-column field="Address" textAlign="Left" width="400px"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>



     <!-- Caixa de Dialogo do syncfusion / Surge ao clicar no detalhes do Customer -->
     <ejs-dialog id='dialog' visible="false" isModal="true" width="550px" showCloseIcon="true" allowDragging="true" overlayClick="onOverlayClick" target="#container">
            <e-dialog-animationsettings effect="Fade" duration="400" delay="0"></e-dialog-animationsettings>
            
     </ejs-dialog>



     <!-- Caixa de Dialogo do syncfusion / Surge ao clicar no delete do Customer -->
     <ejs-dialog id='deleteDialog' visible="false" isModal="true" width="300px" showCloseIcon="true" allowDragging="true" overlayClick="onDeleteOverlayClick" target="#container" 
     header="Delete Customer">
            <e-dialog-animationsettings effect="Fade" duration="400" delay="0"></e-dialog-animationsettings>
            
            <e-dialog-buttons>              
                <e-dialog-dialogbutton buttonModel="@yesButton" click="ondlgYesClick"></e-dialog-dialogbutton>
                <e-dialog-dialogbutton buttonModel="@noButton" click="ondlgNoClick"></e-dialog-dialogbutton>
            </e-dialog-buttons>
     </ejs-dialog>

</div>

<!-- Script template para a grid do syncfusion, este template permite colocar a imagem do user numa determinada coluna -->
<script id="template" type="text/x-template">
    <div class="image">        
        <img src="${ImageFullPath}" />
    </div>
</script>

<!-- Script template para a grid do syncfusion, este template permite colocar a checkbox numa determinada coluna -->
<script id="templateCheckbox" type="text/x-template">
    <div class="template_checkbox">
        ${if(Active)}
            <input type="checkbox" checked disabled="disabled" > ${else}
            <input type="checkbox" disabled="disabled"> 
        ${/if}
    </div>
</script>


<!-- Script com as funçoes dos botoes da grid do syncfusion -->
<script>


    let id;

    function rowSelected(args){
       // obtem a linha da tabela selecionada     
       var selectedrecords = this.getSelectedRecords();  
     
       // atribui à variàvel id o valor do user id selecionado na tabela
       id = selectedrecords[0].Id;   
    }

    function toolbarClick(args) {        

        //determina se o botão da tabela clicado foi o de editar Customer, o editCustomer é o id do botão definido na linha 17
        if (args.item.id === 'editCustomer') {            

            //se o id for nulo, vazio ou indefenido entra neste bloco de código e faz um pedido por ajax ao servidor, mais especifico,
            //ao método ToastNotification do controlador Customer que vai fazer surgir uma toast message com a mensagem/tipo desejado
            //os tipos de mensagem possiveis são warning,success,information e error.
            if (id === "" || id === null || id === undefined) {

                let message = "You must select a customer!";
                let type = "warning";

                $.ajax({
                    url: '@Url.Action("ToastNotification","Customer")',
                    type: 'POST',
                    dataType: 'json',
                    data: { message: message, type: type },
                    success: function(result) {
                        console.log(result);
                    },
                    error: function(ex) {
                        console.log(ex);
                    }
                });

                return;
            }

            //se o id não for nulo,vazio ou indefinido chama o url seguinte (método update do controlador Customer) e passa-lhe o id
            window.location.href = '/Customer/Update/' + id;
        }

        //determina se o botão da tabela clicado foi o de info do Customer, o infoCustomer é o id do botão definido na linha 18
        if (args.item.id === 'infoCustomer') {            
            //ler linhas 140 a 142, faz exatamente o mesmo.
            if (id === "" || id === null || id === undefined) {

                let message = "You must select a customer!";
                let type = "warning";

                $.ajax({
                    url: '@Url.Action("ToastNotification","Customer")',
                    type: 'POST',
                    dataType: 'json',
                    data: { message: message, type: type },
                    success: function(result) {
                        console.log(result);
                    },
                    error: function(ex) {
                        console.log(ex);
                    }
                });

                return;
            }

            //se o id não for vazio,nulo ou indefinido, procede a pedido ajax ao método CustomerDetails no controlador Customer para obter os dados do empregado            
            $.ajax({
                url: '@Url.Action("CustomerDetails","Customer")',
                type: 'POST',
                dataType: 'json',
                data: {Id: id},
                success: function(customerData) {                        
                    //se conseguir obter os dados (customerData), vai apresentar os mesmos no dialog do syncfusion
                    var dialog = document.getElementById("dialog").ej2_instances[0];  //obtem o objecto dialog do syncfusion                       
                    dialog.header = customerData.fullName + " Details"; // defini o titolo do dialog e apresenta-o no Header
                    let accountStatus;

                    if (customerData.active === false) {
                        accountStatus = "Inactive";
                    }
                    else {
                        accountStatus = "Active";
                    }

                    dialog.content = "<b>Full Name: </b>" + customerData.fullName + "<br/>" + //Define a mensagem/conteudo do dialog
                        "<b>Email: </b>" + customerData.email + "<br/>" +
                        "<b>Address: </b>" + customerData.address + "<br/>" +
                        "<b>Phone Number: </b>" + customerData.phoneNumber + "<br/>" +
                        "<b>NIF: </b>" + customerData.nif + "<br/>"+
                        "<b>Account Status: </b>" + accountStatus + "<br/>";

                    dialog.show(); // faz popup do dialog
                },
                error: function(ex) //se não obter dados do servidor apresentar a mensagem de erro no log do browser
                {
                    console.log("failed " + ex.message);
                }
            });
        }


         //determina se o botão da tabela clicado foi o de delete do customer, o deleteCustomer é o id do botão definido na linha 19
        if (args.item.id === 'deleteCustomer') {            
            //ler linhas 140 a 142, faz exatamente o mesmo.
            if (id === "" || id === null || id === undefined) {

                let message = "You must select a customer!";
                let type = "warning";

                $.ajax({
                    url: '@Url.Action("ToastNotification","Customer")',
                    type: 'POST',
                    dataType: 'json',
                    data: { message: message, type: type },
                    success: function(result) {
                        console.log(result);
                    },
                    error: function(ex) {
                        console.log(ex);
                    }
                });

                return;
            }
            //se o id não for vazio,nulo ou indefinido, apresenta a caixa de dialogo (deleteDialog) do syncfusion que está defenida entre as linhas
            //91 e 99
            var dialog = document.getElementById("deleteDialog").ej2_instances[0];  
            dialog.content = "Are you sure you want to delete the customer?"; // insere o conteudo da caixa de dialogo
            dialog.show(); //faz popup do dialog           
        }

        //determina se o botão da tabela clicada foi o de mostrar empregado inactivo
        if (args.item.id === 'showCustomer') {   
            //caso tenha sido, chama a partir de url, o método ViewAll do contralador employee e passa-lhe a variavel isActive a falso
            //para que possa mostrar todos os empregados, activos e inactivos
            window.location.href = '/Customer/ViewAll?isActive=false';            
        }
        //determina se o botão da tabela clicada foi o de esconder empregado inactivo
        if (args.item.id === 'hideCustomer') { 
           //caso tenha sido, chama a partir de url, o método ViewAll do contralador employee e passa-lhe a variavel isActive a true
            //para que possa mostrar somente os empregados activos
            window.location.href = '/Customer/ViewAll?isActive=true';            
        }
        
    }

    //on OverlayClick é função que permite fechar as janelas dialog do syncfusion quando utilizador clica numa outra zona do ecrã sem ser 
    //na caixa de dialog própriamente dita.
    function onOverlayClick() {
            var dialog = document.getElementById("dialog").ej2_instances[0];              
            dialog.hide();        
    }; 

    //faz o mesmo da função acima, mas para caixa de dialogo diferente (deleteDialog)
    function onDeleteOverlayClick() {
        var dialog = document.getElementById("deleteDialog").ej2_instances[0];              
            dialog.hide();
    }


    //função que é chamada quando se clica no botão "NO" da caixa de dialogo Delete empregado, função limita-se a fechar caixa de diálogo
    function ondlgNoClick() {
        var dialog = document.getElementById("deleteDialog").ej2_instances[0];              
        dialog.hide();
    }

    //função que é chamada quando se clica no botão "YES" da caixa de dialogo Delete empregado
    function ondlgYesClick() {
         
        //procede a pedido ajax para correr metodo Delete do controlador Employee, método esse que devolve um booleano(true/false)
        $.ajax({
                url: '@Url.Action("Delete","Customer")',
                type: 'POST',
                dataType: 'json',
                data: {id: id},
                success: function(result) {                        
                    //se resultado for true, procede a pedido ajax para chamar o método ToastNotification do controlador employee e 
                    // mostrar uma toast message, neste caso de sucesso.
                    if (result === true) {

                        let message = "Customer deleted with success!";
                        let type = "success";

                        $.ajax({
                            url: '@Url.Action("ToastNotification","Customer")',
                            type: 'POST',
                            dataType: 'json',
                            data: { message: message, type: type },
                            success: function(result) {
                               
                            },
                            error: function(ex) {
                                console.log(ex);
                            }
                        });
                        
                        var dialog = document.getElementById("deleteDialog").ej2_instances[0];
                        dialog.hide();    
                        setTimeout(function() {
                          window.location.reload();
                        }, 3000);
                    }
                    else {

                        //se o resultado for falso, faz pedido ajax ao mesmo método de toastNotification para mostrar toast message de erro/warning
                        let message = "There was a problem deleting the customer";
                        let type = "Warning";

                        $.ajax({
                            url: '@Url.Action("ToastNotification","Customer")',
                            type: 'POST',
                            dataType: 'json',
                            data: { message: message, type: type },
                            success: function(result) {
                                console.log(result);
                            },
                            error: function(ex) {
                                console.log(ex);
                            }
                        });

                        var dialog = document.getElementById("deleteDialog").ej2_instances[0];
                        dialog.hide();
                    }
                },
                error: function(ex) 
                {
                    console.log("failed " + ex.message);
                }
        });
    }

 </script>