@* VIEW ALL STOCK ALL ALERT*@

@using Webx.Web.Models
@model IEnumerable<Webx.Web.Data.Entities.Stock>

@{
    ViewData["Title"] = "View All Stock ALERT";
    ViewData["Breadcrumb"] = null;
    Layout = "~/Views/Shared/_LayoutAdminPanel.cshtml";
    List<Object> toolbarItems = new List<Object>();
    //if (ViewBag.IsActive == true)
    //{
    //    toolbarItems.Add(new { text = "Show Services", tooltipText = "Show Services", prefixIcon = "e-expand", id = "showServices", align = "Right" });
    //}
    //else
    //{
    //    toolbarItems.Add(new { text = "Hide Services", tooltipText = "Hide Services", prefixIcon = "e-expand", id = "hideServices", align = "Right" });
    //}
    toolbarItems.Add("Search");

    @if ((this.User.Identity.IsAuthenticated) && ((this.User.IsInRole("Admin")) || (this.User.IsInRole("Product Manager"))))
    {
        //toolbarItems.Add(new { text = "Info", tooltipText = "Stock Details", prefixIcon = "e-expand", id = "infoStock" });
        toolbarItems.Add(new { text = "Edit   ", tooltipText = "Edit Stock", prefixIcon = "e-expand", id = "editStock" });
        toolbarItems.Add(new { text = "ExportXml   ", tooltipText = "ExportXml", prefixIcon = "e-expand", id = "exportXml" });
        //toolbarItems.Add(new { text = "Create", tooltipText = "Create Stock", prefixIcon = "e-expand", id = "createStock" });
        //toolbarItems.Add(new { text = "Delete", tooltipText = "Delete Employee", prefixIcon = "e-expand", id = "deleteStock" });
        //toolbarItems.Add(new { text = "Cancel", tooltipText = "Cancel", prefixIcon = "e-expand", id = "cancelStock" });
    }


    var yesButton = new ButtonModel() { content = "Yes", cssClass = "e-flat" };
    var noButton = new ButtonModel() { content = "No", cssClass = "e-flat" };
}

<style>
    #typeddl {
        min-width: 100px;
    }

    .image img {
        height: 75px;
        width: 75px;
        border-radius: 50px;
        box-shadow: inset 0 0 1px #e0e0e0, inset 0 0 14px rgba(0, 0, 0, 0.2);
    }

    #editStock > .e-expand::before {
        content: '\e730' !important;
    }

    #updateStock > .e-expand::before{
        content : '\e7c8' ! important;
    }

    #infoStock > .e-expand::before {
        content: ' ' !important;
    }

    #deleteStock > .e-expand::before {
        content: '\e820' !important;
    }

    #cancelStock > .e-expand::before {
        content: '\e7e7' !important;
    }

    #showStock > .e-expand::before {
        content: '\e887' !important;
    }

    #hideStock > .e-expand::before {
        content: '\e7de' !important;
    }

    #exportXml > .e-expand::before {
    content: '\e72e' !important;
    }

</style>

<!--Div que permite dar espaçamento entre ejs grid e topo-->
<div class="container-fluid" style="min-height:25px;background-color: #f4f6f9;">
</div>

<div id='container' class="container-fluid">

    <!-- Tabela/Grid do syncfusion  -->
    <ejs-grid id="grid" TValue="@ViewBag.Type" dataSource="Model" rowSelected="rowSelected" allowSelection="true" allowPaging="true" allowSorting="true" allowFiltering="false" toolbarClick="toolbarClick" toolbar="toolbarItems">
        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="false" newRowPosition="Top"></e-grid-editSettings>
        <e-grid-selectionsettings type="Single" mode="Row"></e-grid-selectionsettings>
        <e-grid-pagesettings pageSize="18"></e-grid-pagesettings>
        <e-grid-columns>
            <e-grid-column field="" isPrimaryKey="false" width="20px"></e-grid-column>
            <e-grid-column field="Id" isPrimaryKey="true" width="0px"></e-grid-column>
            <e-grid-column field="Product.Name" headerText="Product Description" allowEditing="false" textAlign="Left" width="360px"></e-grid-column>
            <e-grid-column field="Store.IsOnlineStore" headerText="Online Store?" template="#templateCheckbox2" textAlign="Center" width="100px"></e-grid-column>
            <e-grid-column field="Store.Name" headerText="Store Name" textAlign=" Left" allowEditing="false" width="120px"></e-grid-column>
            <e-grid-column field="Product.Price" headerText="Price" allowEditing="false" format="# ###.00 '€'" textAlign="Right" width="80px"></e-grid-column>
            <e-grid-column field="" isPrimaryKey="false" width="30px"></e-grid-column>
            <e-grid-column field="Product.Category.Name" headerText="Category"  allowEditing="false" textAlign="Left" width="100px"></e-grid-column>
            <e-grid-column field="Product.Brand.Name" headerText="Brand" headerText="Brand" allowEditing="false" textAlign="Left" width="100px"></e-grid-column>
            <e-grid-column field="MinimumQuantity" headerText="Min. Quantity" textAlign="Right" allowEditing="true" width="80px"></e-grid-column>
            <e-grid-column field="Quantity" headerText="Quantity" textAlign="Right" allowEditing="true" width="80px"></e-grid-column>
            <e-grid-column field="" isPrimaryKey="false" width="30px"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>

    <!-- Caixa de Dialogo do syncfusion / Surge ao clicar no detalhes do  Stock -->
    <ejs-dialog id='dialog' visible="false" isModal="true" width="850px" showCloseIcon="true" allowDragging="true" overlayClick="onOverlayClick" target="#container">
        <e-dialog-animationsettings effect="Fade" duration="400" delay="0"></e-dialog-animationsettings>

    </ejs-dialog>

    <!-- Caixa de Dialogo do syncfusion / Surge ao clicar no delete do  Stock -->
    <ejs-dialog id='deleteDialog' visible="false" isModal="true" width="300px" showCloseIcon="true" allowDragging="true" overlayClick="onDeleteOverlayClick" target="#container"
                header="Delete  Stock">
        <e-dialog-animationsettings effect="Fade" duration="400" delay="0"></e-dialog-animationsettings>

        <e-dialog-buttons>
            <e-dialog-dialogbutton buttonModel="@yesButton" click="ondlgYesClick"></e-dialog-dialogbutton>
            <e-dialog-dialogbutton buttonModel="@noButton" click="ondlgNoClick"></e-dialog-dialogbutton>
        </e-dialog-buttons>
    </ejs-dialog>
</div>

<!-- Script template para a grid do syncfusion, este template permite colocar a checkbox numa determinada coluna -->
<script id="templateCheckbox2" type="text/x-template">
    <div class="template_checkbox">
        ${if(Store.IsOnlineStore)}
            <input type="checkbox" checked disabled="disabled" > ${else}
            <input type="checkbox" disabled="disabled">
        ${/if}
    </div>
</script>

<!-- Script com as funçoes dos botoes da grid do syncfusion -->
<script>

    let id;

    function rowSelected(args) {
        // obtem a linha da tabela selecionada
        var selectedrecords = this.getSelectedRecords();

        // atribui à variàvel id o valor do stock id selecionado na tabela
        id = selectedrecords[0].Id;
    }

    function toolbarClick(args) {

        //determina se o botão da tabela clicado foi o de editar store, o editStore é o id do botão definido na linha 21
        if (args.item.id === 'createStock') {
            window.location.href = '/Stock/Create/';
        }

        //determina se o botão da tabela clicado foi o de editar store, o editStore é o id do botão definido na linha 21
        if (args.item.id === 'exportXml') {
            window.location.href = '/Stock/ExportXml/';
        }

        //determina se o botão da tabela clicado foi o de editar  Stock, o edit Stock é o id do botão definido na linha 17
        if (args.item.id === 'editStock') {

            //se o id for nulo, vazio ou indefenido entra neste bloco de código e faz um pedido por ajax ao servidor, mais especifico,
            //ao método ToastNotification do controlador  Stock que vai fazer surgir uma toast message com a mensagem/tipo desejado
            //os tipos de mensagem possiveis são warning,success,information e error.
            if (id === "" || id === null || id === undefined) {

                let message = "You must select a stock!";
                let type = "warning";

                $.ajax({
                    url: '@Url.Action("ToastNotification","Stock")',
                    type: 'POST',
                    dataType: 'json',
                    data: { message: message, type: type },
                    success: function (result) {
                        console.log(result);
                    },
                    error: function (ex) {
                        console.log(ex);
                    }
                });
                return;
            }

            //se o id não for nulo,vazio ou indefinido chama o url seguinte (método update do controlador Stock) e passa-lhe o id
            window.location.href = '/Stock/Update/' + id ;
        }

        //determina se o botão da tabela clicado foi o de info do Stock, o info Stock é o id do botão definido na linha 18
        if (args.item.id === 'infoStock') {
            //ler linhas 140 a 142, faz exatamente o mesmo.
            if (id === "" || id === null || id === undefined) {

                let message = "You must select a stock!";
                let type = "warning";

                $.ajax({
                    url: '@Url.Action("ToastNotification","Stock")',
                    type: 'POST',
                    dataType: 'json',
                    data: { message: message, type: type },
                    success: function (result) {
                        console.log(result);
                    },
                    error: function (ex) {
                        console.log(ex);
                    }
                });

                return;
            }

            //se o id não for vazio,nulo ou indefinido, procede a pedido ajax ao método StockDetails no controlador  Stock para obter os dados do empregado
            $.ajax({
                url: '@Url.Action("StockDetails","Stock")',
                type: 'POST',
                dataType: 'json',
                data: { Id: id },
                success: function (stockData) {
                    //se conseguir obter os dados (stockData), vai apresentar os mesmos no dialog do syncfusion
                    var dialog = document.getElementById("dialog").ej2_instances[0];  //obtem o objecto dialog do syncfusion
                    dialog.header = stockData.name + " Details"; // defini o titolo do dialog e apresenta-o no Header
                    let accountStatus;

                    if (stockData.active === false) {
                        isSerciceStatus = "Service";
                    }
                    else {
                        isSerciceStatus = "Stock";
                    }

                    dialog.content = "<b>Price: </b>" + stockData.price + " €uros <br/>" + //Define a mensagem/conteudo do dialog
                        "<b>Brand: </b>" + stockData.brand.name + "<br/>" +
                        "<b>Category: </b>" + stockData.category.name + "<br/>" +
                        "<b>Is Service?: </b>" + isSerciceStatus + "<br/><br/>" +
                        "<b>Description: </b>" + stockData.description + "<br/>";

                    dialog.show(); // faz popup do dialog
                },
                error: function (ex) //se não obter dados do servidor apresentar a mensagem de erro no log do browser
                {
                    console.log("failed " + ex.message);
                }
            });
        }

        //determina se o botão da tabela clicado foi o de delete do stock, o delete Stock é o id do botão definido na linha 19
        if (args.item.id === 'deleteStock') {
            //ler linhas 140 a 142, faz exatamente o mesmo.
            if (id === "" || id === null || id === undefined) {

                let message = "You must select a stock!";
                let type = "warning";

                $.ajax({
                    url: '@Url.Action("ToastNotification","Stock")',
                    type: 'POST',
                    dataType: 'json',
                    data: { message: message, type: type },
                    success: function (result) {
                        console.log(result);
                    },
                    error: function (ex) {
                        console.log(ex);
                    }
                });

                return;
            }
            //se o id não for vazio,nulo ou indefinido, apresenta a caixa de dialogo (deleteDialog) do syncfusion que está defenida entre as linhas
            //91 e 99
            var dialog = document.getElementById("deleteDialog").ej2_instances[0];
            dialog.content = "Are you sure you want to delete the stock?"; // insere o conteudo da caixa de dialogo
            dialog.show(); //faz popup do dialog
        }

        //determina se o botão da tabela clicada foi o de mostrar stock inactivo
        if (args.item.id === 'showStock') {
            //caso tenha sido, chama a partir de url, o método ViewAll do contralador employee e passa-lhe a variavel isActive a falso
            //para que possa mostrar todos os empregados, activos e inactivos
            window.location.href = '/Stock/ViewAll?isActive=false';
        }

        //determina se o botão da tabela clicada foi o de esconder stock inactivo
        if (args.item.id === 'hideStock') {
            //caso tenha sido, chama a partir de url, o método ViewAll do contralador employee e passa-lhe a variavel isActive a true
            //para que possa mostrar somente os empregados activos
            window.location.href = '/Stock/ViewAll?isActive=true';
        }
    }

    //on OverlayClick é função que permite fechar as janelas dialog do syncfusion quando utilizador clica numa outra zona do ecrã sem ser
    //na caixa de dialog própriamente dita.
    function onOverlayClick() {
        var dialog = document.getElementById("dialog").ej2_instances[0];
        dialog.hide();
    };

    //faz o mesmo da função acima, mas para caixa de dialogo diferente (deleteDialog)
    function onDeleteOverlayClick() {
        var dialog = document.getElementById("deleteDialog").ej2_instances[0];
        dialog.hide();
    }

    //função que é chamada quando se clica no botão "NO" da caixa de dialogo Delete empregado, função limita-se a fechar caixa de diálogo
    function ondlgNoClick() {
        var dialog = document.getElementById("deleteDialog").ej2_instances[0];
        dialog.hide();
    }

    //função que é chamada quando se clica no botão "YES" da caixa de dialogo Delete empregado
    function ondlgYesClick() {

        //procede a pedido ajax para correr metodo Delete do controlador Employee, método esse que devolve um booleano(true/false)
        $.ajax({
            url: '@Url.Action("Delete","Stock")',
            type: 'POST',
            dataType: 'json',
            data: { id: id },
            success: function (result) {
                //se resultado for true, procede a pedido ajax para chamar o método ToastNotification do controlador employee e
                // mostrar uma toast message, neste caso de sucesso.
                if (result === true) {

                    let message = " Stock deleted with success!";
                    let type = "success";

                    $.ajax({
                        url: '@Url.Action("ToastNotification","Stock")',
                        type: 'POST',
                        dataType: 'json',
                        data: { message: message, type: type },
                        success: function (result) {

                        },
                        error: function (ex) {
                            console.log(ex);
                        }
                    });

                    var dialog = document.getElementById("deleteDialog").ej2_instances[0];
                    dialog.hide();
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                }
                else {

                    //se o resultado for falso, faz pedido ajax ao mesmo método de toastNotification para mostrar toast message de erro/warning
                    let message = "There was a problem deleting the stock";
                    let type = "Warning";

                    $.ajax({
                        url: '@Url.Action("ToastNotification","Stock")',
                        type: 'POST',
                        dataType: 'json',
                        data: { message: message, type: type },
                        success: function (result) {
                            console.log(result);
                        },
                        error: function (ex) {
                            console.log(ex);
                        }
                    });

                    var dialog = document.getElementById("deleteDialog").ej2_instances[0];
                    dialog.hide();
                }
            },
            error: function (ex) {
                console.log("failed " + ex.message);
            }
        });
    }

</script>